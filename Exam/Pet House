function solveClasses() {
    class Pet {
        constructor(owner, name) {
            this.owner = owner;
            this.name = name;
            this.comments = [];
        }

        addComment(comment) {
            let comm = this.comments.find(c => c == comment);
            if (comm == undefined) {
                this.comments.push(comment);
                return `Comment is added.`;
            } else {
                throw new Error('This comment is already added!');
            }
        }

        feed() {
            return `${this.name} is fed`;
        }

        toString() {
            if (this.comments.length == 0) {
                return `Here is ${this.owner}'s pet ${this.name}.`;
            } else {
                let result = this.comments.join(', ');
                return `Here is ${this.owner}'s pet ${this.name}.\nSpecial requirements: ${result}`;
            }
        }
    }

    class Cat extends Pet {
        constructor(owner, name, insideHabits, scratching) {
            super(owner, name);
            this.insideHabits = insideHabits;
            this.scratching = scratching;
        }

        feed() {
            return super.feed() + `, happy and purring.`;
        }

        toString() {
            if (!this.scratching == true) {
                return super.toString() + `\nMain information:\n${this.name} is a cat with ${this.insideHabits}`;
            } else {
                return super.toString() + `\nMain information:\n${this.name} is a cat with ${this.insideHabits}, but beware of scratches.`;
            }
        }
    }

    class Dog extends Pet {
        constructor(owner, name, runningNeeds, trainability) {
            super(owner, name);
            this.runningNeeds = runningNeeds;
            this.trainability = trainability;
        }

        feed() {
            return super.feed() + `, happy and wagging tail.`;
        }

        toString() {
            return super.toString() + `\nMain information:\n${this.name} is a dog with need of ${this.runningNeeds}km running every day and ${this.trainability} trainability.`;
        }
    }

    return {
        Pet,
        Cat,
        Dog
    };
}
