function solve() {
    $elements = {
        createTaskTask: document.querySelector("#task"),
        createTaskDescription: document.querySelector("#description"),
        createTaskDate: document.querySelector("#date"),
        createTaskButton: document.querySelector("#add"),
        openSection: document
            .querySelector("section div h1.orange")
            .parentNode.parentNode.querySelector("div:nth-child(2)"),
        inProgressDiv: document.querySelector("div#in-progress"),
        completeSection: document
            .querySelector("section div h1.green")
            .parentNode.parentNode.querySelector("div:nth-child(2)")
    };

    $elements.createTaskButton.addEventListener("click", createTask);

    function createTask(e) {
        e.preventDefault();

        const task = $elements.createTaskTask.value;
        const description = $elements.createTaskDescription.value;
        const date = $elements.createTaskDate.value;

        $elements.createTaskTask.value = "";
        $elements.createTaskDescription.value = "";
        $elements.createTaskDate.value = "";

        if (!(task && description && date)) {
            return;
        }

        const articleEl = createHTMLElement("article");
        const taskHThree = createHTMLElement("h3", null, task);
        const descriptionP = createHTMLElement(
            "p",
            null,
            `Description: ${description}`
        );
        const dateP = createHTMLElement("p", null, `Due Date: ${date}`);
        const buttonsDiv = createHTMLElement("div", ["flex"]);
        const startButton = createHTMLElement("button", ["green"], "Start", null, {
            name: "click",
            func: startTask
        });
        const deleteButton = createHTMLElement("button", ["red"], "Delete", null, {
            name: "click",
            func: deleteTask
        });

        appednChildrenToParent([startButton, deleteButton], buttonsDiv);
        appednChildrenToParent(
            [taskHThree, descriptionP, dateP, buttonsDiv],
            articleEl
        );

        $elements.openSection.appendChild(articleEl);
    }

    function startTask() {
        const buttonsDiv = this.parentNode;
        buttonsDiv.textContent = "";

        const deleteButton = createHTMLElement("button", ["red"], "Delete", null, {
            name: "click",
            func: deleteTask
        });
        const finishButton = createHTMLElement(
            "button", ["orange"],
            "Finish",
            null, {
                name: "click",
                func: finishTask
            }
        );
        appednChildrenToParent([deleteButton, finishButton], buttonsDiv);

        const task = buttonsDiv.parentNode;
        $elements.inProgressDiv.appendChild(task);
    }

    function finishTask() {
        const buttonsDiv = this.parentNode;
        const task = buttonsDiv.parentNode;
        task.removeChild(buttonsDiv);

        $elements.completeSection.appendChild(task);
    }

    function deleteTask() {
        const task = this.parentNode.parentNode;
        task.parentNode.removeChild(task);
    }

    function sortHTMLCollection(collection, parent) {
        let sorted = Array.from(collection).sort((a, b) => {
            let dateA = new Date(a.children[2].textContent.split(": ")[1]);
            let dateB = new Date(b.children[2].textContent.split(": ")[1]);

            return dateA - dateB;
        });

        parent.textContent = "";
        sorted.forEach(e => parent.appendChild(e));
    }

    function createHTMLElement(
        tagName,
        classNames,
        textContent,
        attributes,
        event
    ) {
        let element = document.createElement(tagName);

        if (classNames) {
            classNames.forEach(c => element.classList.add(c));
        }

        if (textContent) {
            element.textContent = textContent;
        }

        if (attributes) {
            attributes.forEach(a => element.setAttribute(a.k, a.v));
        }

        if (event) {
            element.addEventListener(event.name, event.func);
        }

        return element;
    }

    function appednChildrenToParent(children, parent) {
        children.forEach(c => parent.appendChild(c));
        return parent;
    }
}
